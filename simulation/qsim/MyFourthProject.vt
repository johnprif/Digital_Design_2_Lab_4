// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/03/2021 22:59:06"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DataPath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DataPath_vlg_sample_tst(
	ADD_SUB,
	CLK,
	CLR,
	EN_A,
	EN_B,
	L_S_A,
	L_S_B,
	SEL_A,
	SEL_B,
	SET,
	SF,
	X_0,
	X_1,
	X_2,
	X_3,
	X_4,
	X_5,
	X_6,
	X_7,
	Y_0,
	Y_1,
	Y_2,
	Y_3,
	Y_4,
	Y_5,
	Y_6,
	Y_7,
	sampler_tx
);
input  ADD_SUB;
input  CLK;
input  CLR;
input  EN_A;
input  EN_B;
input  L_S_A;
input  L_S_B;
input  SEL_A;
input  SEL_B;
input  SET;
input  SF;
input  X_0;
input  X_1;
input  X_2;
input  X_3;
input  X_4;
input  X_5;
input  X_6;
input  X_7;
input  Y_0;
input  Y_1;
input  Y_2;
input  Y_3;
input  Y_4;
input  Y_5;
input  Y_6;
input  Y_7;
output sampler_tx;

reg sample;
time current_time;
always @(ADD_SUB or CLK or CLR or EN_A or EN_B or L_S_A or L_S_B or SEL_A or SEL_B or SET or SF or X_0 or X_1 or X_2 or X_3 or X_4 or X_5 or X_6 or X_7 or Y_0 or Y_1 or Y_2 or Y_3 or Y_4 or Y_5 or Y_6 or Y_7)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DataPath_vlg_check_tst (
	A,
	B,
	Flag_Before,
	Flag_Saved,
	Res,
	sampler_rx
);
input [7:0] A;
input [7:0] B;
input  Flag_Before;
input  Flag_Saved;
input [7:0] Res;
input sampler_rx;

reg [7:0] A_expected;
reg [7:0] B_expected;
reg  Flag_Before_expected;
reg  Flag_Saved_expected;
reg [7:0] Res_expected;

reg [7:0] A_prev;
reg [7:0] B_prev;
reg  Flag_Before_prev;
reg  Flag_Saved_prev;
reg [7:0] Res_prev;

reg [7:0] A_expected_prev;
reg [7:0] B_expected_prev;
reg  Flag_Before_expected_prev;
reg  Flag_Saved_expected_prev;
reg [7:0] Res_expected_prev;

reg [7:0] last_A_exp;
reg [7:0] last_B_exp;
reg  last_Flag_Before_exp;
reg  last_Flag_Saved_exp;
reg [7:0] last_Res_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	B_prev = B;
	Flag_Before_prev = Flag_Before;
	Flag_Saved_prev = Flag_Saved;
	Res_prev = Res;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	B_expected_prev = B_expected;
	Flag_Before_expected_prev = Flag_Before_expected;
	Flag_Saved_expected_prev = Flag_Saved_expected;
	Res_expected_prev = Res_expected;
end


// expected A[ 7 ]
initial
begin
	A_expected[7] = 1'bX;
end 
// expected A[ 6 ]
initial
begin
	A_expected[6] = 1'bX;
end 
// expected A[ 5 ]
initial
begin
	A_expected[5] = 1'bX;
end 
// expected A[ 4 ]
initial
begin
	A_expected[4] = 1'bX;
end 
// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
end 
// expected B[ 7 ]
initial
begin
	B_expected[7] = 1'bX;
end 
// expected B[ 6 ]
initial
begin
	B_expected[6] = 1'bX;
end 
// expected B[ 5 ]
initial
begin
	B_expected[5] = 1'bX;
end 
// expected B[ 4 ]
initial
begin
	B_expected[4] = 1'bX;
end 
// expected B[ 3 ]
initial
begin
	B_expected[3] = 1'bX;
end 
// expected B[ 2 ]
initial
begin
	B_expected[2] = 1'bX;
end 
// expected B[ 1 ]
initial
begin
	B_expected[1] = 1'bX;
end 
// expected B[ 0 ]
initial
begin
	B_expected[0] = 1'bX;
end 
// expected Res[ 7 ]
initial
begin
	Res_expected[7] = 1'bX;
end 
// expected Res[ 6 ]
initial
begin
	Res_expected[6] = 1'bX;
end 
// expected Res[ 5 ]
initial
begin
	Res_expected[5] = 1'bX;
end 
// expected Res[ 4 ]
initial
begin
	Res_expected[4] = 1'bX;
end 
// expected Res[ 3 ]
initial
begin
	Res_expected[3] = 1'bX;
end 
// expected Res[ 2 ]
initial
begin
	Res_expected[2] = 1'bX;
end 
// expected Res[ 1 ]
initial
begin
	Res_expected[1] = 1'bX;
end 
// expected Res[ 0 ]
initial
begin
	Res_expected[0] = 1'bX;
end 

// expected Flag_Saved
initial
begin
	Flag_Saved_expected = 1'bX;
end 

// expected Flag_Before
initial
begin
	Flag_Before_expected = 1'bX;
end 
// generate trigger
always @(A_expected or A or B_expected or B or Flag_Before_expected or Flag_Before or Flag_Saved_expected or Flag_Saved or Res_expected or Res)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected B = %b | expected Flag_Before = %b | expected Flag_Saved = %b | expected Res = %b | ",A_expected_prev,B_expected_prev,Flag_Before_expected_prev,Flag_Saved_expected_prev,Res_expected_prev);
	$display("| real A = %b | real B = %b | real Flag_Before = %b | real Flag_Saved = %b | real Res = %b | ",A_prev,B_prev,Flag_Before_prev,Flag_Saved_prev,Res_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( A_expected_prev[4] !== 1'bx ) && ( A_prev[4] !== A_expected_prev[4] )
		&& ((A_expected_prev[4] !== last_A_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[4] = A_expected_prev[4];
	end
	if (
		( A_expected_prev[5] !== 1'bx ) && ( A_prev[5] !== A_expected_prev[5] )
		&& ((A_expected_prev[5] !== last_A_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[5] = A_expected_prev[5];
	end
	if (
		( A_expected_prev[6] !== 1'bx ) && ( A_prev[6] !== A_expected_prev[6] )
		&& ((A_expected_prev[6] !== last_A_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[6] = A_expected_prev[6];
	end
	if (
		( A_expected_prev[7] !== 1'bx ) && ( A_prev[7] !== A_expected_prev[7] )
		&& ((A_expected_prev[7] !== last_A_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[7] = A_expected_prev[7];
	end
	if (
		( B_expected_prev[0] !== 1'bx ) && ( B_prev[0] !== B_expected_prev[0] )
		&& ((B_expected_prev[0] !== last_B_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[0] = B_expected_prev[0];
	end
	if (
		( B_expected_prev[1] !== 1'bx ) && ( B_prev[1] !== B_expected_prev[1] )
		&& ((B_expected_prev[1] !== last_B_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[1] = B_expected_prev[1];
	end
	if (
		( B_expected_prev[2] !== 1'bx ) && ( B_prev[2] !== B_expected_prev[2] )
		&& ((B_expected_prev[2] !== last_B_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[2] = B_expected_prev[2];
	end
	if (
		( B_expected_prev[3] !== 1'bx ) && ( B_prev[3] !== B_expected_prev[3] )
		&& ((B_expected_prev[3] !== last_B_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[3] = B_expected_prev[3];
	end
	if (
		( B_expected_prev[4] !== 1'bx ) && ( B_prev[4] !== B_expected_prev[4] )
		&& ((B_expected_prev[4] !== last_B_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[4] = B_expected_prev[4];
	end
	if (
		( B_expected_prev[5] !== 1'bx ) && ( B_prev[5] !== B_expected_prev[5] )
		&& ((B_expected_prev[5] !== last_B_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[5] = B_expected_prev[5];
	end
	if (
		( B_expected_prev[6] !== 1'bx ) && ( B_prev[6] !== B_expected_prev[6] )
		&& ((B_expected_prev[6] !== last_B_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[6] = B_expected_prev[6];
	end
	if (
		( B_expected_prev[7] !== 1'bx ) && ( B_prev[7] !== B_expected_prev[7] )
		&& ((B_expected_prev[7] !== last_B_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[7] = B_expected_prev[7];
	end
	if (
		( Flag_Before_expected_prev !== 1'bx ) && ( Flag_Before_prev !== Flag_Before_expected_prev )
		&& ((Flag_Before_expected_prev !== last_Flag_Before_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Flag_Before :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Flag_Before_expected_prev);
		$display ("     Real value = %b", Flag_Before_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Flag_Before_exp = Flag_Before_expected_prev;
	end
	if (
		( Flag_Saved_expected_prev !== 1'bx ) && ( Flag_Saved_prev !== Flag_Saved_expected_prev )
		&& ((Flag_Saved_expected_prev !== last_Flag_Saved_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Flag_Saved :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Flag_Saved_expected_prev);
		$display ("     Real value = %b", Flag_Saved_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Flag_Saved_exp = Flag_Saved_expected_prev;
	end
	if (
		( Res_expected_prev[0] !== 1'bx ) && ( Res_prev[0] !== Res_expected_prev[0] )
		&& ((Res_expected_prev[0] !== last_Res_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Res_exp[0] = Res_expected_prev[0];
	end
	if (
		( Res_expected_prev[1] !== 1'bx ) && ( Res_prev[1] !== Res_expected_prev[1] )
		&& ((Res_expected_prev[1] !== last_Res_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Res_exp[1] = Res_expected_prev[1];
	end
	if (
		( Res_expected_prev[2] !== 1'bx ) && ( Res_prev[2] !== Res_expected_prev[2] )
		&& ((Res_expected_prev[2] !== last_Res_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Res_exp[2] = Res_expected_prev[2];
	end
	if (
		( Res_expected_prev[3] !== 1'bx ) && ( Res_prev[3] !== Res_expected_prev[3] )
		&& ((Res_expected_prev[3] !== last_Res_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Res_exp[3] = Res_expected_prev[3];
	end
	if (
		( Res_expected_prev[4] !== 1'bx ) && ( Res_prev[4] !== Res_expected_prev[4] )
		&& ((Res_expected_prev[4] !== last_Res_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Res_exp[4] = Res_expected_prev[4];
	end
	if (
		( Res_expected_prev[5] !== 1'bx ) && ( Res_prev[5] !== Res_expected_prev[5] )
		&& ((Res_expected_prev[5] !== last_Res_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Res_exp[5] = Res_expected_prev[5];
	end
	if (
		( Res_expected_prev[6] !== 1'bx ) && ( Res_prev[6] !== Res_expected_prev[6] )
		&& ((Res_expected_prev[6] !== last_Res_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Res_exp[6] = Res_expected_prev[6];
	end
	if (
		( Res_expected_prev[7] !== 1'bx ) && ( Res_prev[7] !== Res_expected_prev[7] )
		&& ((Res_expected_prev[7] !== last_Res_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Res[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Res_expected_prev);
		$display ("     Real value = %b", Res_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Res_exp[7] = Res_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DataPath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ADD_SUB;
reg CLK;
reg CLR;
reg EN_A;
reg EN_B;
reg L_S_A;
reg L_S_B;
reg SEL_A;
reg SEL_B;
reg SET;
reg SF;
reg X_0;
reg X_1;
reg X_2;
reg X_3;
reg X_4;
reg X_5;
reg X_6;
reg X_7;
reg Y_0;
reg Y_1;
reg Y_2;
reg Y_3;
reg Y_4;
reg Y_5;
reg Y_6;
reg Y_7;
// wires                                               
wire [7:0] A;
wire [7:0] B;
wire Flag_Before;
wire Flag_Saved;
wire [7:0] Res;

wire sampler;                             

// assign statements (if any)                          
DataPath i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ADD_SUB(ADD_SUB),
	.B(B),
	.CLK(CLK),
	.CLR(CLR),
	.EN_A(EN_A),
	.EN_B(EN_B),
	.Flag_Before(Flag_Before),
	.Flag_Saved(Flag_Saved),
	.L_S_A(L_S_A),
	.L_S_B(L_S_B),
	.Res(Res),
	.SEL_A(SEL_A),
	.SEL_B(SEL_B),
	.SET(SET),
	.SF(SF),
	.X_0(X_0),
	.X_1(X_1),
	.X_2(X_2),
	.X_3(X_3),
	.X_4(X_4),
	.X_5(X_5),
	.X_6(X_6),
	.X_7(X_7),
	.Y_0(Y_0),
	.Y_1(Y_1),
	.Y_2(Y_2),
	.Y_3(Y_3),
	.Y_4(Y_4),
	.Y_5(Y_5),
	.Y_6(Y_6),
	.Y_7(Y_7)
);

// CLK
initial
begin
	repeat(7)
	begin
		CLK = 1'b0;
		CLK = #70000 1'b1;
		# 70000;
	end
	CLK = 1'b0;
end 

// CLR
initial
begin
	CLR = 1'b0;
	CLR = #20000 1'b1;
end 

// SET
initial
begin
	SET = 1'b1;
end 

// EN_A
initial
begin
	EN_A = 1'b1;
end 

// EN_B
initial
begin
	EN_B = 1'b1;
end 

// L_S_A
initial
begin
	L_S_A = 1'b0;
end 

// L_S_B
always
begin
	L_S_B = 1'b0;
	L_S_B = #100000 1'b1;
	#100000;
end 

// SEL_A
initial
begin
	SEL_A = 1'b0;
	SEL_A = #110000 1'b1;
end 

// SEL_B
initial
begin
	SEL_B = 1'b0;
	SEL_B = #110000 1'b1;
end 

// SF
initial
begin
	SF = 1'b0;
end 

// ADD_SUB
initial
begin
	ADD_SUB = 1'b0;
	ADD_SUB = #260000 1'b1;
	ADD_SUB = #350000 1'b0;
end 

// X_7
always
begin
	X_7 = 1'b0;
	#1000000;
end 

// X_6
always
begin
	X_6 = 1'b0;
	#1000000;
end 

// X_5
always
begin
	X_5 = 1'b0;
	#1000000;
end 

// X_4
always
begin
	X_4 = 1'b0;
	X_4 = #640000 1'b1;
	#360000;
end 

// X_3
always
begin
	X_3 = 1'b0;
	X_3 = #320000 1'b1;
	X_3 = #320000 1'b0;
	X_3 = #320000 1'b1;
	#40000;
end 

// X_2
always
begin
	X_2 = 1'b0;
	X_2 = #160000 1'b1;
	# 160000;
	repeat(2)
	begin
		X_2 = 1'b0;
		X_2 = #160000 1'b1;
		# 160000;
	end
	X_2 = 1'b0;
	#40000;
end 

// X_1
always
begin
	X_1 = 1'b0;
	X_1 = #80000 1'b1;
	# 80000;
	repeat(5)
	begin
		X_1 = 1'b0;
		X_1 = #80000 1'b1;
		# 80000;
	end
	X_1 = 1'b0;
	#40000;
end 

// X_0
always
begin
	X_0 = 1'b0;
	X_0 = #40000 1'b1;
	# 40000;
	repeat(11)
	begin
		X_0 = 1'b0;
		X_0 = #40000 1'b1;
		# 40000;
	end
	X_0 = 1'b0;
	#40000;
end 

// Y_7
always
begin
	Y_7 = 1'b0;
	#1000000;
end 

// Y_6
always
begin
	Y_6 = 1'b0;
	#1000000;
end 

// Y_5
always
begin
	Y_5 = 1'b0;
	#1000000;
end 

// Y_4
always
begin
	Y_4 = 1'b0;
	Y_4 = #960000 1'b1;
	#40000;
end 

// Y_3
always
begin
	Y_3 = 1'b0;
	Y_3 = #480000 1'b1;
	Y_3 = #480000 1'b0;
	#40000;
end 

// Y_2
always
begin
	Y_2 = 1'b0;
	Y_2 = #240000 1'b1;
	Y_2 = #240000 1'b0;
	Y_2 = #240000 1'b1;
	Y_2 = #240000 1'b0;
	#40000;
end 

// Y_1
always
begin
	Y_1 = 1'b0;
	Y_1 = #120000 1'b1;
	# 120000;
	repeat(3)
	begin
		Y_1 = 1'b0;
		Y_1 = #120000 1'b1;
		# 120000;
	end
	Y_1 = 1'b0;
	#40000;
end 

// Y_0
always
begin
	Y_0 = 1'b0;
	Y_0 = #60000 1'b1;
	# 60000;
	repeat(7)
	begin
		Y_0 = 1'b0;
		Y_0 = #60000 1'b1;
		# 60000;
	end
	Y_0 = 1'b0;
	#40000;
end 

DataPath_vlg_sample_tst tb_sample (
	.ADD_SUB(ADD_SUB),
	.CLK(CLK),
	.CLR(CLR),
	.EN_A(EN_A),
	.EN_B(EN_B),
	.L_S_A(L_S_A),
	.L_S_B(L_S_B),
	.SEL_A(SEL_A),
	.SEL_B(SEL_B),
	.SET(SET),
	.SF(SF),
	.X_0(X_0),
	.X_1(X_1),
	.X_2(X_2),
	.X_3(X_3),
	.X_4(X_4),
	.X_5(X_5),
	.X_6(X_6),
	.X_7(X_7),
	.Y_0(Y_0),
	.Y_1(Y_1),
	.Y_2(Y_2),
	.Y_3(Y_3),
	.Y_4(Y_4),
	.Y_5(Y_5),
	.Y_6(Y_6),
	.Y_7(Y_7),
	.sampler_tx(sampler)
);

DataPath_vlg_check_tst tb_out(
	.A(A),
	.B(B),
	.Flag_Before(Flag_Before),
	.Flag_Saved(Flag_Saved),
	.Res(Res),
	.sampler_rx(sampler)
);
endmodule

